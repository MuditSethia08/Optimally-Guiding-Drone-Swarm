import argparse
import numpy as np

def aa_hit_prob(drone_pos, aa):
    return 0.5*np.e**-(np.linalg.norm(
        np.array(drone_pos) - np.array(aa)
    ))

def drone_hit_prob(drone_pos, aa):
    return 2*np.e**-(np.linalg.norm(
        np.array(drone_pos) - np.array(aa)
    ))

def out_of_arena(drone_pos1,drone_pos2):
    if drone_pos1[0] < 0 or drone_pos1[0] > 3 or drone_pos2[0] < 0 or drone_pos2[0] > 3:
        return True
    if drone_pos1[1] < 0 or drone_pos1[1] > 3 or drone_pos2[0] < 0 or drone_pos2[0] > 3:
        return True
    return False

def spit_action(a,b):
    return 7*a+b

def get_state_code(drone_pos1,drone_pos2, aa1_status, aa2_status):
    # Winning
    if aa1_status == 0 and aa2_status == 0:
        return 0
    return 100000*drone_pos2[0] + 10000*drone_pos1[1]+1000*drone_pos2[0] + 100*drone_pos2[1] + 10*aa1_status + aa2_status

def print_as_mdp(num_S, num_A, transitions):
    print("numStates", num_S)
    print("numActions", num_A)
    print("end 0 1")
    for t in transitions:
        print("transition", t[0], t[1], t[2], t[3], t[4])
    print("mdptype episodic")
    print("discount 1.0")

if __name__=="__main__":
    aa_positions = [
        (2,0),
        (3,2)
    ]
    # abcd
    # a-drone x
    # b-drone y
    # c-aa1 alive
    # d-aa2 alive
    # 16 for each drone
    # 3 for statuses of both the anti-airs
    # 3 end states:
    # -1 -> 2 drone dead
    # 0 -> both anti-airs dead

    num_S = 2 + 16*16*3 +1 #change made
    num_A = 7
    drone_death_reward = -2
    aa_kill_reward = 5
    actions = {
        0: "do nothing",
        1: "shoot first aa",
        2: "shoot second aa",
        3: "move up",
        4: "move left",
        5: "move down",
        6: "move right"
    }
    movement_delta = {
        3: (0,-1),
        4: (-1,0),
        5: (0,1),
        6: (1,0)
    }

    transitions = []
    states = [-1, 0] #change
    for x_coord1 in range(4):
        for y_coord1 in range(4):
            for x_coord2 in range(4):
                for y_coord2 in range(4):
                    states.append(get_state_code((x_coord1, y_coord1),(x_coord2, y_coord2), 0, 1))
                    states.append(get_state_code((x_coord1, y_coord1),(x_coord2, y_coord2), 1, 0))
                    states.append(get_state_code((x_coord1, y_coord1),(x_coord2, y_coord2), 1, 1))
    #states=[-1,0,next 16 numbers have state val when aa2 is alive,next 16 when aa1 is alive, next 16 when both alive]
    #-1 and 0 are default states
    for x_coord1 in range(7):
        for y_coord1 in range(7):
            for x_coord2 in range(7):
                for y_coord2 in range(7):
                    drone_pos1 = (x_coord1, y_coord1)
                    drone_pos2 = (x_coord2, y_coord2)#change made

                    ##################
                    ### dead-alive ###

                    for aa_statuses in [(0,1), (1,0), (1,1)]:
                        prob_drone_gets_hit1 = aa_statuses[0]*aa_hit_prob(drone_pos1, aa_positions[0])+aa_statuses[1]*aa_hit_prob(drone_pos1, aa_positions[1])-aa_statuses[0]*aa_hit_prob(drone_pos1, aa_positions[0])*aa_statuses[1]*aa_hit_prob(drone_pos, aa_positions[1])
                        prob_drone_gets_hit2 = aa_statuses[0]*aa_hit_prob(drone_pos2, aa_positions[0])+aa_statuses[1]*aa_hit_prob(drone_pos2, aa_positions[1])-aa_statuses[0]*aa_hit_prob(drone_pos2, aa_positions[0])*aa_statuses[1]*aa_hit_prob(drone_pos, aa_positions[1])
                         
                        #attacking aa1
                        transitions.append((
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(0, 1),
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), 0, (1-prob_drone_gets_hit2)*(1-aa1_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(0, 1),
                            states.index(get_state_code((-100,-100),drone_pos2, 0, aa_statuses[1])), aa_kill_reward, (1-prob_drone_gets_hit2)*(aa1_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(0, 1),
                            states.index(get_state_code((-100,-100),(-100,-100), aa_statuses[0], aa_statuses[1])), aa_kill_reward, (prob_drone_gets_hit2)*(1-aa1_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(0, 1),
                            states.index(get_state_code((-100,-100),drone_pos2, 0, aa_statuses[1])), aa_kill_reward+drone_death_reward, (prob_drone_gets_hit2)*(aa1_killed_prob)
                        ))

                        #attacking aa2
                        transitions.append((
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(0, 2),
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), 0, (1-prob_drone_gets_hit2)*(1-aa2_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(0, 2),
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], 0)), aa_kill_reward, (1-prob_drone_gets_hit2)*(aa2_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(0, 2),
                            states.index(get_state_code((-100,-100),(-100,-100), aa_statuses[0], aa_statuses[1])), drone_death_reward, (prob_drone_gets_hit2)*(1-aa2_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(0, 2),
                            states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], 0)), aa_kill_reward+drone_death_reward, (prob_drone_gets_hit2)*(aa2_killed_prob)
                        ))

                        #attacking aa1
                        transitions.append((
                            states.index(get_state_code(drone_pos1,(-100,-100), aa_statuses[0], aa_statuses[1])), spit_action(1, 0),
                            states.index(get_state_code(drone_pos1,(-100,-100), aa_statuses[0], aa_statuses[1])), 0, (1-prob_drone_gets_hit1)*(1-aa1_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos1,(-100,-100), aa_statuses[0], aa_statuses[1])), spit_action(1, 0),
                            states.index(get_state_code(drone_pos1,(-100,-100), 0, aa_statuses[1])), aa_kill_reward, (1-prob_drone_gets_hit1)*(aa1_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos1,(-100,-100), aa_statuses[0], aa_statuses[1])), spit_action(1, 0),
                            states.index(get_state_code((-100,-100),(-100,-100), aa_statuses[0], aa_statuses[1])), drone_death_reward, (prob_drone_gets_hit1)*(1-aa1_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos1,(-100,-100), aa_statuses[0], aa_statuses[1])), spit_action(1, 0),
                            states.index(get_state_code((-100,-100),(-100,-100), 0, aa_statuses[1])), aa_kill_reward+drone_death_reward, (prob_drone_gets_hit1)*(aa1_killed_prob)
                        ))
                        
                        #attacking aa2
                        transitions.append((
                            states.index(get_state_code(drone_pos1,(-100,-100), aa_statuses[0], aa_statuses[1])), spit_action(2, 0),
                            states.index(get_state_code(drone_pos1,(-100,-100), aa_statuses[0], aa_statuses[1])), 0, (1-prob_drone_gets_hit2)*(1-aa1_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos1,(-100,-100), aa_statuses[0], aa_statuses[1])), spit_action(2, 0),
                            states.index(get_state_code(drone_pos1,(-100,-100), aa_statuses[0], 0)), aa_kill_reward, (1-prob_drone_gets_hit2)*(aa1_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos1,(-100,-100), aa_statuses[0], aa_statuses[1])), spit_action(2, 0),
                            states.index(get_state_code((-100,-100),(-100,-100), aa_statuses[0], aa_statuses[1])), drone_death_reward, (prob_drone_gets_hit2)*(1-aa1_killed_prob)
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos1,(-100,-100), aa_statuses[0], aa_statuses[1])), spit_action(2, 0),
                            states.index(get_state_code((-100,-100),(-100,-100), aa_statuses[0], 0)), aa_kill_reward+drone_death_reward, (prob_drone_gets_hit2)*(aa1_killed_prob)
                        ))
                    
                    
                    # Attack transitions
                    for aa_statuses in [(0,1), (1,0), (1,1)]:
                        prob_drone_gets_hit1 = aa_statuses[0]*aa_hit_prob(drone_pos1, aa_positions[0])+aa_statuses[1]*aa_hit_prob(drone_pos1, aa_positions[1])-aa_statuses[0]*aa_hit_prob(drone_pos1, aa_positions[0])*aa_statuses[1]*aa_hit_prob(drone_pos, aa_positions[1])
                        prob_drone_gets_hit2 = aa_statuses[0]*aa_hit_prob(drone_pos2, aa_positions[0])+aa_statuses[1]*aa_hit_prob(drone_pos2, aa_positions[1])-aa_statuses[0]*aa_hit_prob(drone_pos2, aa_positions[0])*aa_statuses[1]*aa_hit_prob(drone_pos, aa_positions[1])
                        aa1_killed_prob = drone_hit_prob(drone_pos1, aa_positions[0])*aa_statuses[0]+drone_hit_prob(drone_pos2, aa_positions[0])*aa_statuses[0]-drone_hit_prob(drone_pos1, aa_positions[0])*aa_statuses[0]*drone_hit_prob(drone_pos2, aa_positions[0])*aa_statuses[0]
                        aa2_killed_prob = drone_hit_prob(drone_pos1, aa_positions[1])*aa_statuses[1]+drone_hit_prob(drone_pos2, aa_positions[1])*aa_statuses[1]-drone_hit_prob(drone_pos1, aa_positions[1])*aa_statuses[1]*drone_hit_prob(drone_pos2, aa_positions[1])*aa_statuses[1]
                        # No reward if everyone misses their shots
                        transitions.append((
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 1,
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 0, (1-prob_drone_gets_hit1)*(1-aa1_killed_prob)*(1-prob_drone_gets_hit2)
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 2,
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 0, (1-prob_drone_gets_hit)*(1-aa2_killed_prob)*(1-prob_drone_gets_hit2)
                        ))
                        # Reward if the drone kills the aa without dying
                        transitions.append((
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 1,
                            states.index(get_state_code(drone_pos1,drone_pos2, 0, aa_statuses[1])), aa_kill_reward, (1-prob_drone_gets_hit1)*(aa1_killed_prob)*(1-prob_drone_gets_hit2)
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 2,
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], 0)), aa_kill_reward, (1-prob_drone_gets_hit)*(aa2_killed_prob)*(1-prob_drone_gets_hit2)
                        ))
                        # Negative reward if the drone gets hit without hitting the aa
                        #d1 gets hit and both d1 and d2 miss
                        transitions.append((
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 1,
                            states.index(-1), drone_death_reward, prob_drone_gets_hit1*(1-aa1_killed_prob)*(1-prob_drone_gets_hit2)
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 2,
                            states.index(-1), drone_death_reward, prob_drone_gets_hit1*(1-aa2_killed_prob)*(1-prob_drone_gets_hit2)
                        ))
                        #d2 gets hit and both d1 and d2 miss
                        transitions.append((
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 1,
                            states.index(-1), drone_death_reward, prob_drone_gets_hit2*(1-aa1_killed_prob)*(1-prob_drone_gets_hit1)
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 2,
                            states.index(-1), drone_death_reward, prob_drone_gets_hit2*(1-aa2_killed_prob)*(1-prob_drone_gets_hit1)
                        ))
                        #d2 and d1 gets hit and both d1 and d2 miss
                        transitions.append((
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 1,
                            states.index(-2), 2*drone_death_reward, prob_drone_gets_hit2*(1-aa1_killed_prob)*(prob_drone_gets_hit1)
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos1,drone_pos2, aa_statuses[0], aa_statuses[1])), 2,
                            states.index(-2), 2*drone_death_reward, prob_drone_gets_hit2*(1-aa2_killed_prob)*(prob_drone_gets_hit1)
                        ))
                        # Reward for killing the aa and negative reward for dying
                        transitions.append((
                            states.index(get_state_code(drone_pos, aa_statuses[0], aa_statuses[1])), 1,
                            states.index(-1), aa_kill_reward + drone_death_reward, aa1_killed_prob*prob_drone_gets_hit
                        ))
                        transitions.append((
                            states.index(get_state_code(drone_pos, aa_statuses[0], aa_statuses[1])), 2,
                            states.index(-1), aa_kill_reward + drone_death_reward, prob_drone_gets_hit*aa2_killed_prob
                        ))
                    ################
                    ## move-atta ###
                    # d1 moves d2 attack
                    for move_action in range(3,7,1):
                        next_pos = np.array(drone_pos1) + \
                            np.array(movement_delta[move_action])
                        # Negative reward for going out of bounds
                        if out_of_arena(next_pos):
                            transitions.append((
                                states.index(get_state_code(drone_pos1, drone_pos2, 1, 1)),
                                move_action, states.index((-100,-100), drone_pos2, 1, 1), drone_death_reward, 1
                            ))
                            transitions.append((
                                states.index(get_state_code(drone_pos1, drone_pos2, 0, 1)),
                                move_action, states.index((-100,-100), drone_pos2, 0, 1), drone_death_reward, 1
                            ))
                            transitions.append((
                                states.index(get_state_code(drone_pos1, drone_pos2, 1, 0)),
                                move_action, states.index((-100,-100), drone_pos2, 1, 0), drone_death_reward, 1
                            ))
                            continue
                        for aa_statuses in [(0,1), (1,0), (1,1)]:
                            #change movement suicide rewards
                            prob_drone_gets_hit1 = aa_statuses[0]*aa_hit_prob(drone_pos1, aa_positions[0])+aa_statuses[1]*aa_hit_prob(drone_pos1, aa_positions[1])-aa_statuses[0]*aa_hit_prob(drone_pos1, aa_positions[0])*aa_statuses[1]*aa_hit_prob(drone_pos, aa_positions[1])
                            prob_drone_gets_hit2 = aa_statuses[0]*aa_hit_prob(drone_pos2, aa_positions[0])+aa_statuses[1]*aa_hit_prob(drone_pos2, aa_positions[1])-aa_statuses[0]*aa_hit_prob(drone_pos2, aa_positions[0])*aa_statuses[1]*aa_hit_prob(drone_pos, aa_positions[1])
                            aa1_killed_prob = drone_hit_prob(drone_pos1, aa_positions[0])*aa_statuses[0]+drone_hit_prob(drone_pos2, aa_positions[0])*aa_statuses[0]-drone_hit_prob(drone_pos1, aa_positions[0])*aa_statuses[0]*drone_hit_prob(drone_pos2, aa_positions[0])*aa_statuses[0]
                            aa2_killed_prob = drone_hit_prob(drone_pos1, aa_positions[1])*aa_statuses[1]+drone_hit_prob(drone_pos2, aa_positions[1])*aa_statuses[1]-drone_hit_prob(drone_pos1, aa_positions[1])*aa_statuses[1]*drone_hit_prob(drone_pos2, aa_positions[1])*aa_statuses[1]
                        
                            # Invading airspace of aa1
                            if np.linalg.norm(np.array(next_pos) - np.array(aa_positions[0])) == 0 and aa_statuses[0]==1 and aa_statuses[1]==1:
                                # aa2 hit
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(0), 2*aa_kill_reward, (1-prob_drone_gets_hit2)*aa2_killed_prob*(1-prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(0), 2*aa_kill_reward, (prob_drone_gets_hit2)*aa2_killed_prob*(1-prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(0), 2*aa_kill_reward, (1-prob_drone_gets_hit2)*aa2_killed_prob*(prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(0), 2*aa_kill_reward, (prob_drone_gets_hit2)*aa2_killed_prob*(prob_drone_gets_hit1)
                                ))
                                # aa2 not hit
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(get_state_code(next_pos, drone_pos2, 0, aa_statuses[1])), 2*aa_kill_reward, (1-prob_drone_gets_hit2)*(1-aa2_killed_prob)*(1-prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(get_state_code(next_pos, (-100,-100), 0, aa_statuses[1])), 2*aa_kill_reward, (prob_drone_gets_hit2)*(1-aa2_killed_prob)*(1-prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(get_state_code((-100,-100), drone_pos2, 0, aa_statuses[1])), 2*aa_kill_reward, (1-prob_drone_gets_hit2)*(1-aa2_killed_prob)*(prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(get_state_code((-100,-100), (-100,-100), 0, aa_statuses[1])), 2*aa_kill_reward, (prob_drone_gets_hit2)*(1-aa2_killed_prob)*(prob_drone_gets_hit1)
                                ))
                               
                            # Invading airspace of aa2
                            # !!!!!!!!!!!!!!!!!!!!!
                                #!!!!!!!!!!!!!!!!!!!!!imp aa_statusesp[0]==0 case left to be taken
                            elif np.linalg.norm(np.array(next_pos) - np.array(aa_positions[1])) == 0 and aa_statuses[1]==1 and aa_statuses[0]==1:
                                # aa1 hit
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(0), 2*aa_kill_reward, (1-prob_drone_gets_hit2)*aa1_killed_prob*(1-prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(0), 2*aa_kill_reward+drone_death_reward, (prob_drone_gets_hit2)*aa1_killed_prob*(1-prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(0), 2*aa_kill_reward+drone_death_reward, (1-prob_drone_gets_hit2)*aa1_killed_prob*(prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(0), 2*aa_kill_reward+2*drone_death_reward, (prob_drone_gets_hit2)*aa1_killed_prob*(prob_drone_gets_hit1)
                                ))
                                # aa1 not hit
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(get_state_code(next_pos, drone_pos2, aa_statuses[0], 0)), aa_kill_reward, (1-prob_drone_gets_hit2)*(1-aa1_killed_prob)*(1-prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(get_state_code(next_pos, (-100,-100), aa_statuses[0], 0)), aa_kill_reward+drone_death_reward, (prob_drone_gets_hit2)*(1-aa1_killed_prob)*(1-prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(get_state_code((-100,-100), drone_pos2, aa_statuses[1], 0)), drone_death_reward+aa_kill_reward, (1-prob_drone_gets_hit2)*(1-aa1_killed_prob)*(prob_drone_gets_hit1)
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, drone_pos2, aa_statuses[0], aa_statuses[1])), spit_action(move_action,2),
                                    states.index(get_state_code((-100,-100), (-100,-100), aa_statuses[0], 0)), 2*drone_death_reward+aa_kill_reward, (prob_drone_gets_hit2)*(1-aa1_killed_prob)*(prob_drone_gets_hit1)
                                ))
                            # No reward for moving freely
                            # change -0.5 reward for wasting everyones time
                            else:
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, (-100,-100), aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code(next_pos, (-100,-100), aa_statuses[0], aa_statuses[1])), -0.5, 1-prob_drone_gets_hit
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, (-100,-100), aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code((-100,-100), (-100,-100), aa_statuses[0], aa_statuses[1])), drone_death_reward, prob_drone_gets_hit
                                ))

                    #d1 is dead d2 moves
                    for move_action in range(3,7,1):
                        next_pos = np.array(drone_pos2) + \
                            np.array(movement_delta[move_action])
                        # Negative reward for going out of bounds
                        if out_of_arena(next_pos):
                            transitions.append((
                                states.index(get_state_code((-100,-100), drone_pos2, 1, 1)),
                                move_action, states.index(-1), drone_death_reward, 1
                            ))
                            transitions.append((
                                states.index(get_state_code((-100,-100), drone_pos2, 0, 1)),
                                move_action, states.index(-1), drone_death_reward, 1
                            ))
                            transitions.append((
                                states.index(get_state_code((-100,-100),drone_pos2, 1, 0)),
                                move_action, states.index(-1), drone_death_reward, 1
                            ))
                            continue
                        for aa_statuses in [(0,1), (1,0), (1,1)]:
                            #change movement suicide rewards
                            prob_drone_gets_hit = aa_statuses[0]*aa_hit_prob(drone_pos2, aa_positions[0])+aa_statuses[1]*aa_hit_prob(drone_pos2, aa_positions[1])-aa_statuses[0]*aa_hit_prob(drone_pos2, aa_positions[0])*aa_statuses[1]*aa_hit_prob(drone_pos2, aa_positions[1])
                            # Invading airspace of aa1
                            if np.linalg.norm(np.array(next_pos) - np.array(aa_positions[0])) == 0 and aa_statuses[0]==1:
                                # Reward for killing the aa
                                transitions.append((
                                    states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code((-100,-100),next_pos, 0, aa_statuses[1])), aa_kill_reward, 1-prob_drone_gets_hit
                                ))
                                # Reward for killing the aa and negative reward for dying
                                transitions.append((
                                    states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(0), aa_kill_reward + drone_death_reward, prob_drone_gets_hit
                                ))
                            # Invading airspace of aa2
                            elif np.linalg.norm(np.array(next_pos) - np.array(aa_positions[1])) == 0 and aa_statuses[1]==1:
                                # Reward for killing the aa
                                transitions.append((
                                    states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code((-100,-100),next_pos, aa_statuses[0], 0)), aa_kill_reward, 1-prob_drone_gets_hit
                                ))
                                # Reward for killing the aa and negative reward for dying
                                transitions.append((
                                    states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(0), aa_kill_reward + drone_death_reward, prob_drone_gets_hit1
                                ))
                            # No reward for moving freely
                            # change -0.5 reward for wasting everyones time
                            else:
                                transitions.append((
                                    states.index(get_state_code((-100,-100), drone_pos2,aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code((-100,-100),next_pos, aa_statuses[0], aa_statuses[1])), -0.5, 1-prob_drone_gets_hit
                                ))
                                transitions.append((
                                    states.index(get_state_code((-100,-100),drone_pos1, aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code((-100,-100), (-100,-100), aa_statuses[0], aa_statuses[1])), drone_death_reward, prob_drone_gets_hit
                                ))  
                ################
                ## move-dead ###
                    # d1 moves d2 is dead
                    for move_action in range(3,7,1):
                        next_pos = np.array(drone_pos1) + \
                            np.array(movement_delta[move_action])
                        # Negative reward for going out of bounds
                        if out_of_arena(next_pos):
                            transitions.append((
                                states.index(get_state_code(drone_pos1, (-100,-100), 1, 1)),
                                move_action, states.index(-1), drone_death_reward, 1
                            ))
                            transitions.append((
                                states.index(get_state_code(drone_pos1, (-100,-100), 0, 1)),
                                move_action, states.index(-1), drone_death_reward, 1
                            ))
                            transitions.append((
                                states.index(get_state_code(drone_pos1, (-100,-100), 1, 0)),
                                move_action, states.index(-1), drone_death_reward, 1
                            ))
                            continue
                        for aa_statuses in [(0,1), (1,0), (1,1)]:
                            #change movement suicide rewards
                            prob_drone_gets_hit = aa_statuses[0]*aa_hit_prob(drone_pos1, aa_positions[0])+aa_statuses[1]*aa_hit_prob(drone_pos1, aa_positions[1])-aa_statuses[0]*aa_hit_prob(drone_pos1, aa_positions[0])*aa_statuses[1]*aa_hit_prob(drone_pos1, aa_positions[1])
                            # Invading airspace of aa1
                            if np.linalg.norm(np.array(next_pos) - np.array(aa_positions[0])) == 0 and aa_statuses[0]==1:
                                # Reward for killing the aa
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, (-100,-100), aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code(next_pos, aa_statuses[0], aa_statuses[1])), 0, 1-prob_drone_gets_hit
                                ))
                                # Reward for killing the aa and negative reward for dying
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, (-100,-100), aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(0), aa_kill_reward + drone_death_reward, prob_drone_gets_hit
                                ))
                            # Invading airspace of aa2
                            elif np.linalg.norm(np.array(next_pos) - np.array(aa_positions[1])) == 0 and aa_statuses[1]==1:
                                # Reward for killing the aa
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, (-100,-100), aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code(next_pos, (-100,-100), aa_statuses[0], 0)), aa_kill_reward, 1-prob_drone_gets_hit
                                ))
                                # Reward for killing the aa and negative reward for dying
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, (-100,-100), aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(0), aa_kill_reward + drone_death_reward, prob_drone_gets_hit1
                                ))
                            # No reward for moving freely
                            # change -0.5 reward for wasting everyones time
                            else:
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, (-100,-100), aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code(next_pos, (-100,-100), aa_statuses[0], aa_statuses[1])), -0.5, 1-prob_drone_gets_hit
                                ))
                                transitions.append((
                                    states.index(get_state_code(drone_pos1, (-100,-100), aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code((-100,-100), (-100,-100), aa_statuses[0], aa_statuses[1])), drone_death_reward, prob_drone_gets_hit
                                ))

                    #d1 is dead d2 moves
                    for move_action in range(3,7,1):
                        next_pos = np.array(drone_pos2) + \
                            np.array(movement_delta[move_action])
                        # Negative reward for going out of bounds
                        if out_of_arena(next_pos):
                            transitions.append((
                                states.index(get_state_code((-100,-100), drone_pos2, 1, 1)),
                                move_action, states.index(-1), drone_death_reward, 1
                            ))
                            transitions.append((
                                states.index(get_state_code((-100,-100), drone_pos2, 0, 1)),
                                move_action, states.index(-1), drone_death_reward, 1
                            ))
                            transitions.append((
                                states.index(get_state_code((-100,-100),drone_pos2, 1, 0)),
                                move_action, states.index(-1), drone_death_reward, 1
                            ))
                            continue
                        for aa_statuses in [(0,1), (1,0), (1,1)]:
                            #change movement suicide rewards
                            prob_drone_gets_hit = aa_statuses[0]*aa_hit_prob(drone_pos2, aa_positions[0])+aa_statuses[1]*aa_hit_prob(drone_pos2, aa_positions[1])-aa_statuses[0]*aa_hit_prob(drone_pos2, aa_positions[0])*aa_statuses[1]*aa_hit_prob(drone_pos2, aa_positions[1])
                            # Invading airspace of aa1
                            if np.linalg.norm(np.array(next_pos) - np.array(aa_positions[0])) == 0 and aa_statuses[0]==1:
                                # Reward for killing the aa
                                transitions.append((
                                    states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code((-100,-100),next_pos, 0, aa_statuses[1])), aa_kill_reward, 1-prob_drone_gets_hit
                                ))
                                # Reward for killing the aa and negative reward for dying
                                transitions.append((
                                    states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(0), aa_kill_reward + drone_death_reward, prob_drone_gets_hit
                                ))
                            # Invading airspace of aa2
                            elif np.linalg.norm(np.array(next_pos) - np.array(aa_positions[1])) == 0 and aa_statuses[1]==1:
                                # Reward for killing the aa
                                transitions.append((
                                    states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code((-100,-100),next_pos, aa_statuses[0], 0)), aa_kill_reward, 1-prob_drone_gets_hit
                                ))
                                # Reward for killing the aa and negative reward for dying
                                transitions.append((
                                    states.index(get_state_code((-100,-100),drone_pos2, aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(0), aa_kill_reward + drone_death_reward, prob_drone_gets_hit1
                                ))
                            # No reward for moving freely
                            # change -0.5 reward for wasting everyones time
                            else:
                                transitions.append((
                                    states.index(get_state_code((-100,-100), drone_pos2,aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code((-100,-100),next_pos, aa_statuses[0], aa_statuses[1])), -0.5, 1-prob_drone_gets_hit
                                ))
                                transitions.append((
                                    states.index(get_state_code((-100,-100),drone_pos1, aa_statuses[0], aa_statuses[1])), move_action,
                                    states.index(get_state_code((-100,-100), (-100,-100), aa_statuses[0], aa_statuses[1])), drone_death_reward, prob_drone_gets_hit
                                ))            

    transitions = [item for item in transitions if item[4] != 0]
    print_as_mdp(num_S, num_A, transitions)


